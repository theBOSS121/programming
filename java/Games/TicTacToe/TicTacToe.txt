package ticTacToe;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.JFrame;
import javax.swing.Timer;

@SuppressWarnings("serial")
public class TicTacToe extends JFrame implements ActionListener, MouseListener{
	public Timer timer;
	public static TicTacToe ttt;
	public Renderer renderer;
	public static int WIDTH = 500, HEIGHT = 400;
	public int xpos, ypos;
	public boolean xturn,over,x,tie;
	public boolean[] full = {false,false,false,false,false,false,false,false,false};
	public boolean[] X = {false,false,false,false,false,false,false,false,false};
	public int[][] winpos = {
			{0,3,6},
			{0,1,2},
			{0,0,0},
			{2,2,2}
	};
	public String playerX = "Player X wins";
	public String playerO = "Player O wins";
	public String ties = "It's tie";
	
	public TicTacToe(){
		over = false;
		JFrame jframe = new JFrame("TicTacToe");
		jframe.setVisible(true);
		jframe.setSize(WIDTH+7,HEIGHT+27);
		jframe.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		renderer = new Renderer();
		jframe.add(renderer);
		jframe.addMouseListener(this);
		timer = new Timer(20,this);
		timer.start();
		startGame();
	}
	
	private void startGame() {
		xturn = true;
		tie = false;
	}


	public static void main(String[] args){
		ttt = new TicTacToe();
	}

	public void render(Graphics2D g) {
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
		g.setColor(Color.WHITE);
		g.fillRect(0, 0, WIDTH, HEIGHT);
		g.setColor(Color.BLACK);
		g.setStroke(new BasicStroke(5f));
		g.drawLine(WIDTH/3, 0, WIDTH/3, HEIGHT);
		g.drawLine(WIDTH/3*2, 0, WIDTH/3*2, HEIGHT);
		g.drawLine(0, HEIGHT/3, WIDTH, HEIGHT/3);
		g.drawLine(0, HEIGHT/3*2, WIDTH, HEIGHT/3*2);
		for(int i = 0; i < 9;i++){
			if(full[i] == true){
				if(X[i]){
					g.setColor(Color.RED);
					g.setStroke(new BasicStroke(5f));
					g.drawLine((int)i/3*WIDTH/3+10,(int)i%3*HEIGHT/3+10, 
							(int)(1+i/3)*WIDTH/3-10,(int)(1+i%3)*HEIGHT/3-10);
					g.drawLine((int)(1+i/3)*WIDTH/3-10,(int)i%3*HEIGHT/3+10, 
							(int)i/3*WIDTH/3+10,(int)(1+i%3)*HEIGHT/3-10);
				}else{
					g.setColor(Color.BLUE);
					g.setStroke(new BasicStroke(5f));
					g.drawOval((int)i/3*WIDTH/3+10,(int)i%3*HEIGHT/3+10, WIDTH/3-20, HEIGHT/3-20);
				}
			}
		}
		if(over){
			if(x){
				g.setColor(Color.BLACK);
				g.setFont(new Font("Ariel",Font.BOLD,70));
				int swidth = g.getFontMetrics().stringWidth(playerX);
				g.drawString(playerX,WIDTH/2-swidth/2,HEIGHT/2);
				timer.stop();
			}else{
				g.setColor(Color.BLACK);
				g.setFont(new Font("Ariel",Font.BOLD,70));
				int swidth = g.getFontMetrics().stringWidth(playerO);
				g.drawString(playerO,WIDTH/2-swidth/2,HEIGHT/2);
				timer.stop();
			}
		}if(tie){
			g.setColor(Color.BLACK);
			g.setFont(new Font("Ariel",Font.BOLD,70));
			int swidth = g.getFontMetrics().stringWidth(ties);
			g.drawString(ties,WIDTH/2-swidth/2,HEIGHT/2);
			timer.stop();
		}
	}

	public void actionPerformed(ActionEvent arg0) {
		renderer.repaint();
		win();
		if(!over){
			tie();
		}
	}

	private void tie() {
		for(boolean i : full){
			if(!i){
				return;
			}
		}
		tie = true;
	}

	private void win() {
		int plus = 0;
		for(int i=0;i<4;i++){
			if(i==0){
				plus = 1;
			}else if(i == 1){
				plus = 3;
			}else if(i== 2){
				plus = 4;
			}else {
				plus = 2;
			}
			for(int j = 0; j<3;j++){
				if(full[winpos[i][j]] == true){
					if(X[winpos[i][j]]){
						if(full[winpos[i][j]+plus] == true && X[winpos[i][j]+plus] == true&& 
								full[winpos[i][j]+(plus*2)] == true && X[winpos[i][j]+(plus*2)] == true){
									over = true;
									x = true;
						}
					}else{
						if(full[winpos[i][j]+plus] == true && X[winpos[i][j]+plus] == false&& 
								full[winpos[i][j]+(plus*2)] == true && X[winpos[i][j]+(plus*2)] == false){
									over = true;
									x = false;
						}
					}
				}
			}
		}
	}

	public void mouseClicked(MouseEvent e) {
	}

	public void mouseEntered(MouseEvent e) {
	}

	public void mouseExited(MouseEvent e) {
	}

	public void mousePressed(MouseEvent e) {
	}

	public void mouseReleased(MouseEvent e) {
		xpos = e.getX();
		ypos = e.getY();
		if(xpos < WIDTH / 3){
			if(ypos < HEIGHT / 3){
				if(xturn){
					if(full[0] == false){
						full[0] = true;
						xturn = false;
						X[0] = true;
					}
				}else{
					if(full[0] == false){
						full[0] = true;
						xturn = true;
					}
				}

			}
			else if(ypos < HEIGHT / 3*2){
				if(xturn){
					if(full[1] == false){
						full[1] = true;
						xturn = false;
						X[1] = true;
					}
				}else{
					if(full[1] == false){
						full[1] = true;
						xturn = true;
					}
				}
			}
			else if(ypos < HEIGHT){
				if(xturn){
					if(full[2] == false){
						full[2] = true;
						xturn = false;
						X[2] = true;
					}
				}else{
					if(full[2] == false){
						full[2] = true;
						xturn = true;
					}
				}
			}
		}else if(xpos < WIDTH / 3*2){
			if(ypos < HEIGHT / 3){
				if(xturn){
					if(full[3] == false){
						full[3] = true;
						xturn = false;
						X[3] = true;
					}
				}else{
					if(full[3] == false){
						full[3] = true;
						xturn = true;
					}
				}
			}
			else if(ypos < HEIGHT / 3*2){
				if(xturn){
					if(full[4] == false){
						full[4] = true;
						xturn = false;
						X[4] = true;
					}
				}else{
					if(full[4] == false){
						full[4] = true;
						xturn = true;
					}
				}
			}
			else if(ypos < HEIGHT){
				if(xturn){
					if(full[5] == false){
						full[5] = true;
						xturn = false;
						X[5] = true;
					}
				}else{
					if(full[5] == false){
						full[5] = true;
						xturn = true;
					}
				}
			}
		}else if (xpos < WIDTH){
			if(ypos < HEIGHT / 3){
				if(xturn){
					if(full[6] == false){
						full[6] = true;
						xturn = false;
						X[6] = true;
					}
				}else{
					if(full[6] == false){
						full[6] = true;
						xturn = true;
					}
				}
			}
			else if(ypos < HEIGHT / 3*2){
				if(xturn){
					if(full[7] == false){
						full[7] = true;
						xturn = false;
						X[7] = true;
					}
				}else{
					if(full[7] == false){
						full[7] = true;
						xturn = true;
					}
				}
			}
			else if(ypos < HEIGHT){
				if(xturn){
					if(full[8] == false){
						full[8] = true;
						xturn = false;
						X[8] = true;
					}
				}else{
					if(full[8] == false){
						full[8] = true;
						xturn = true;
					}
				}
			}
		}
	}
}
