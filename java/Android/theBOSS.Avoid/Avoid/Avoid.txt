package theBOSS.Avoid;

import com.google.android.gms.common.SignInButton;

import android.app.Activity;
import android.content.Context;
import android.content.SharedPreferences;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.WindowManager;
import android.widget.FrameLayout;
import android.widget.LinearLayout;

public class Avoid extends Activity implements OnTouchListener, SensorEventListener {

	FrameLayout game;
	Renderer renderer;
	LinearLayout widgets;
	SensorManager sm;
	public static float sensorX = 0, sensorY = 0;
	private long pousedTime;
	
	static SharedPreferences someData;

	MediaPlayer song;
	
	public static boolean music = false;
	public static int ballColor = 0;
	
	
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN); 
		getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
		sm = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		someData = getSharedPreferences("theBOSS.Avoid.prefs", 0);
		String dataReturned = someData.getString("bestScore", "0.000");
		String dataReturned2 = someData.getString("lastScore", "0.000");
		String dataReturned3 = someData.getString("ballColor", "0");
		music = someData.getBoolean("music", true);
		ballColor = Integer.parseInt(dataReturned3);
		game = new FrameLayout(this);
		renderer = new Renderer(this);
		renderer.setOnTouchListener(this);
		renderer.bestScore = Float.parseFloat(dataReturned);
		renderer.score = Float.parseFloat(dataReturned2);
		if(music) {
			song = MediaPlayer.create(Avoid.this, R.raw.avoid);
			song.setLooping(true);
			song.start();
		}
		widgets = new LinearLayout(this);		
				
		game.addView(renderer);
		game.addView(widgets);
		
		setContentView(game);
		Log.d("nc", "nc");
	}

	protected void onStop() {
		super.onStop();
		renderer.pause();
		sm.unregisterListener(this);
		if(music) {
			song.release();			
		}
	}
	
	protected void onPause() {
		super.onPause();
		if(Renderer.state == 1 && !Renderer.paused) {
			Renderer.paused = true;
			pousedTime = System.currentTimeMillis();		
		}	
	}

	protected void onRestart() {
		super.onRestart();
		renderer.resume();
		if(music) {
			song = MediaPlayer.create(Avoid.this, R.raw.avoid);
			song.setLooping(true);
			song.start();
		}
	}
	
	protected void onResume() {
		super.onResume();
		if (sm.getSensorList(Sensor.TYPE_ACCELEROMETER).size() != 0) {
			Sensor s = sm.getSensorList(Sensor.TYPE_ACCELEROMETER).get(0);
			sm.registerListener(this, s, SensorManager.SENSOR_DELAY_GAME);
		}
	}
	
	public void onBackPressed() {
		return;
	}
	
	public static void save(float best, float last) {
		SharedPreferences.Editor editor = someData.edit();
		editor.putString("bestScore", Float.toString(best));
		editor.putString("lastScore", Float.toString(last));
		editor.commit();
	}
	
	public static void saveMusic(boolean music) {
		SharedPreferences.Editor editor = someData.edit();
		editor.putBoolean("music", music);
		editor.commit();
	}
	
	public static void saveBallColor(int col) {
		SharedPreferences.Editor editor = someData.edit();
		editor.putString("ballColor", Integer.toString(col));
		editor.commit();
	}
	
	public boolean onTouch(View v, MotionEvent event) {
		if(Renderer.state == 0) {
			if(event.getAction() == MotionEvent.ACTION_DOWN) {
				if(event.getX() > renderer.screenWidth / 7 * 2 && event.getX() < renderer.screenWidth / 7 * 5) {
					if(event.getY() < renderer.screenHeight / 3) {
						Renderer.state = 1;
						renderer.restart(0);
					}else if(event.getY() < renderer.screenHeight / 3 * 2) {
						Renderer.state = 3;
					}else {
						finish();
					}
				}
			}		
		}else if(Renderer.state == 1) {
			if(event.getAction() == MotionEvent.ACTION_DOWN) {
				Renderer.paused = !Renderer.paused;
				if(Renderer.paused) {
					pousedTime = System.currentTimeMillis();
				}else {
					Renderer.startingTime += System.currentTimeMillis() - pousedTime;
				}
			}
		}else if(Renderer.state == 2) {
			if(event.getAction() == MotionEvent.ACTION_DOWN) {
				if(event.getX() > renderer.screenWidth / 3 && event.getX() < renderer.screenWidth / 3 * 2) {
					if(event.getY() > renderer.screenHeight / 2 && event.getY() < renderer.screenHeight / 4 * 3) {
						Renderer.state = 1;
						renderer.restart(0);
					}else if(event.getY() > renderer.screenHeight / 4 * 3) {
						Renderer.state = 0;
					}
				}			
			}
		}else if(Renderer.state == 3) {
			if(event.getAction() == MotionEvent.ACTION_DOWN) {
				if(event.getX() > renderer.screenWidth / 5 && event.getX() < renderer.screenWidth / 5 * 4) {
					if(event.getY() < renderer.screenHeight / 3) {
						music = !music;
						saveMusic(music);
						if(music) {
							song = MediaPlayer.create(Avoid.this, R.raw.avoid);
							song.setLooping(true);
							song.start();
						}else {
							song.release();
						}						
					}else if(event.getY() < renderer.screenHeight / 3 * 2) {
						if(renderer.player.sprite == Renderer.bBall) {
							renderer.player.sprite = Renderer.gBall;
							ballColor = 1;
							saveBallColor(1);
						}
						else if(renderer.player.sprite == Renderer.gBall) {
							renderer.player.sprite = Renderer.oBall;
							ballColor = 2;
							saveBallColor(2);
						}
						else if(renderer.player.sprite == Renderer.oBall) {
							renderer.player.sprite = Renderer.pBall;
							ballColor = 3;
							saveBallColor(3);
						}
						else if(renderer.player.sprite == Renderer.pBall) { 
							renderer.player.sprite = Renderer.yBall;
							ballColor = 4;
							saveBallColor(4);
						}
						else if(renderer.player.sprite == Renderer.yBall) {
							renderer.player.sprite = Renderer.bBall;
							ballColor = 0;
							saveBallColor(0);
						}
					}
				}
				if(event.getX() > renderer.screenWidth / 8 * 3 && event.getX() < renderer.screenWidth /  8 * 5 && event.getY() > renderer.screenHeight / 3 * 2) {
					Renderer.state = 0;
				}
			}
		}

		try {	
			Thread.sleep(50);
		}catch(InterruptedException e) {
			e.printStackTrace();
		}
		return false;
	}

	public void onSensorChanged(SensorEvent event) {
		try {
			Thread.sleep(16);
		} catch (InterruptedException e1) {
			e1.printStackTrace();
		}
		//values are fliped cuz the orientation is landscape
		sensorX = event.values[1];
		sensorY = event.values[0];
	}

	public void onAccuracyChanged(Sensor sensor, int accuracy) {}
}
