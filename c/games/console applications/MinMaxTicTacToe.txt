#include <stdio.h>
#include <stdlib.h>
#include <string.h>


enum{ NOUGHTS, CROSSES, BORDER, EMPTY};
enum{HUMANWIN, COMPWIN, DRAW};

const int Direction[4] = { 1,5,4,6};

const int ConvertTo25 [9] ={
6,7,8,
11,12,13,
16,17,18
};

const int InMiddle = 4;
const int Corners[4] = {0,2,6,8};

int ply = 0;
int position = 0;
int maxPly = 0;

int GetNumForDir(int startSq, const int dir, const int *board, const int us){
    int found=0;
    while(board[startSq]!=BORDER){
        if(board[startSq]!=us){
                break;
        }
        found++;
        startSq+=dir;
    }
return found;
}

int FindThreeInARow(const int *board, const int ourindex,const int us){

    int DirIndex = 0;
    int Dir = 0;
    int threeCount = 1;

    for(DirIndex=0;DirIndex<4;DirIndex++){
        Dir = Direction[DirIndex];
        threeCount+= GetNumForDir(ourindex + Dir, Dir,board,us);
        threeCount+= GetNumForDir(ourindex + Dir *-1, Dir*-1,board,us);
        if(threeCount==3){
            break;
        }
        threeCount = 1;
    }


return threeCount;
}

int FindThreeinARowAllBoard(const int *board, const int us){

    int threeFound = 0;
    int i;
    for(i=0;i<9;i++){
      if(board[ConvertTo25[i]]==us){
        if(FindThreeInARow(board,ConvertTo25[i],us)==3){
            threeFound=1;
            break;
        }
      }

    }
return threeFound;
}

int EvalForWin(const int *board,const int us){
    if(FindThreeinARowAllBoard(board,us)!=0){
        return 1;
    }
    if(FindThreeinARowAllBoard(board,us^1)!=0){
        return -1;
    }
    return 0;
}

int MinMax(int *board,int side){

    int MoveList[9];
    int moveCount = 0;
    int bestScore = -2;
    int score = -2;
    int bestMove = -1;
    int Move;
    int i;

    if(ply>maxPly) maxPly = ply;
    position++;

    if(ply>0){
        score=EvalForWin(board,side);
        if(score!=0){
        return score;
        }
    }

    for(i=0;i<9;++i){
        if(board[ConvertTo25[i]]== EMPTY){
                MoveList[moveCount++] = ConvertTo25[i];
        }
    }
    for(i=0; i<moveCount;++i){
        Move = MoveList[i];
        board[Move] = side;

        ply++;
        score = -MinMax(board,side^1);
        if(score>bestScore){
            bestScore=score;
            bestMove=Move;
        }
        board[Move]= EMPTY;
        ply--;
    }
    if(moveCount==0){
        bestScore = FindThreeinARowAllBoard(board,side);
    }
    if(ply!=0){
        return bestScore;
    }else{
        return bestMove;
    }



}

void InitialiseBoard(int *board){
int i;
    for(i=0;i<25;i++){
    board[i] = BORDER;
    }
    for(i=0;i<9;i++){
    board[ConvertTo25[i]] = EMPTY;
    }

}
void PrintBoard(const int *board){
int i=0;
char pceChars[]="OX|-";
printf("\nboard\n\n");
    for(i=0;i<9;i++){
        if(i!=0 && i%3==0){
        printf("\n\n");
        }
        printf("%4c",pceChars[board[ConvertTo25[i]]]);
    }
 printf("\n");
}

int HasEmpty(const int *board){
    int i;
    for(i=0;i<9;i++){
        if(board[ConvertTo25[i]] == EMPTY) return 1;
    }
    return 0;

}

int GetNextBest(const int *board){

    int ourMove = ConvertTo25[InMiddle];
    if(board[ourMove]==EMPTY){
        return ourMove;
    }
int i;
ourMove = -1;
for(i=0;i<4;i++){

    ourMove = ConvertTo25[Corners[i]];
    if(board[ourMove]==EMPTY){
        break;
    }
    ourMove=-1;
}
return ourMove;
}

int GetWinningMove(int *board, const int side){
    int ourMove = -1;
    int winFound = 0;
    int i;
    for(i=0;i<9;i++){
    if(board[ConvertTo25[i]] == EMPTY){
        ourMove = ConvertTo25[i];
        board[ourMove] = side;

        if(FindThreeInARow(board,ourMove,side)==3){
            winFound = 1;
        }
        board[ourMove] = EMPTY;
        if(winFound ==1){
            break;
        }
        ourMove = -1;
    }
}
return ourMove;

}

int GetComputerMove(int *board, const int side){
/*int i;
int numfree=0;
int avilbleMoves[9];
int randMove;

randMove = GetWinningMove(board,side);
if(randMove!=-1){
    return randMove;
}
randMove = GetWinningMove(board,side^1);
if(randMove!=-1){
    return randMove;
}


randMove = GetNextBest(board);
if(randMove!=-1){
    return randMove;
}
randMove = 0;
for(i=0;i<9;i++){
    if(board[ConvertTo25[i]] == EMPTY){
        avilbleMoves[numfree] = ConvertTo25[i];
        numfree++;
    }
}

randMove = avilbleMoves[rand()%numfree];
return randMove;
*/
    ply=0;
    position=0;
    maxPly=0;
    int best = MinMax(board,side);
    printf("position:%d bestMove:%d",position,best);
    return best;
}

void MakeMove(int *board, const int sq, const side){
board[sq] = side;
}

int GetHumanMove(const int *board){
char userInput[4];
int moveOk = 0;
int move = -1;

while(moveOk ==0){
    printf("Please enter a move from 1 to 9:");
    fgets(userInput, 3, stdin);
    fflush(stdin);
    if(strlen(userInput)!=2){
        printf("napacna dolzina\n");
        continue;
    }
    if(sscanf(userInput,"%d", &move)!=1){
        move = -1;
        printf("invalid input\n");
        continue;
    }
    if(move<1||move>9){
        move = -1;
        printf("napacna stevilka\n");
        continue;
    }

    move--;
    if(board[ConvertTo25[move]]!= EMPTY){
        move = -1;
        printf("square not avilable\n");
        continue;
    }
moveOk=1;
}
printf("making move\n\n");
return ConvertTo25[move];
}

void RunGame(){
    int GameOver = 0;
    int Side = NOUGHTS;
    int LastMoveMade = 0;
    int board[25];

    InitialiseBoard(&board[0]);
    PrintBoard(&board[0]);

        while(!GameOver){
            if(Side == NOUGHTS){
                LastMoveMade = GetHumanMove(&board[0]);
                MakeMove(&board[0],LastMoveMade, Side);
                Side = CROSSES;
            }else{
                LastMoveMade = GetComputerMove(&board[0],Side);
                MakeMove(&board[0],LastMoveMade, Side);
                Side = NOUGHTS;
                PrintBoard(&board[0]);
            }

            if(FindThreeInARow(board, LastMoveMade, Side ^ 1)==3){
                printf("GAME OVER!\n");
                PrintBoard(&board[0]);
                GameOver=1;
                if(Side==NOUGHTS){
                printf("Computer beats you\n");
                }else {
                printf("You are winner\n");
                }

            }

            if(!HasEmpty(board)){
                printf("game over!\n");
                GameOver=1;
                printf("DRAW\n");
                PrintBoard(&board[0]);
            }


    }
}

int main(){

srand(time(NULL));
RunGame();


return 0;
}
