#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <SDL2/SDL.h>
#define GRAVITY 4

int score = 0;

typedef struct{
int x;
int y;
int dead;
}Bird;

typedef struct{
int x;
int y;
}Pipes;

typedef struct{
Bird bird;
int scrollx;
int detectpipe;
Pipes pipes[3];
}GameState;

//zaznava gumbe in caka ce bo pritisnen krizec za zepretiokno ali pa esc key
int processEvents(SDL_Window *window, GameState *game){
SDL_Event event;
int done = 0;
while(SDL_PollEvent(&event)){
        switch(event.type){
        case SDL_WINDOWEVENT_CLOSE:
            {
                if(window){
                    SDL_DestroyWindow(window);
                    window = NULL;
                }
            }
            break;
        case SDL_KEYDOWN:
            {
                switch(event.key.keysym.sym)
                    case SDLK_ESCAPE:
                    {
                        done = 3;
                        break;
                    }

            }
            break;
        case SDL_QUIT:
            {
                done = 3;
                break;
            }
        }

}
if(SDL_KEYDOWN){
if(event.key.keysym.sym == SDLK_SPACE){
    done = 1;
}
}
    return done;
}
//rise igro
void doRender(SDL_Renderer *renderer, GameState *game){
    int i;
    //draw beckround
    SDL_SetRenderDrawColor(renderer,0,0,255,255);
    SDL_RenderClear(renderer);
    if(game->bird.dead==0){
    SDL_SetRenderDrawColor(renderer,0,0,0,255);
    SDL_Rect rect = {game->bird.x,game->bird.y,30,30};
    SDL_RenderFillRect(renderer,&rect);
    }
    for(i=0;i<3;i++){
    SDL_SetRenderDrawColor(renderer,0,255,0,255);
    SDL_Rect rect = {game->pipes[i].x,0,80,game->pipes[i].y};
    SDL_RenderFillRect(renderer,&rect);
    SDL_Rect rect1 = {game->pipes[i].x,game->pipes[i].y+200,80,720-(game->pipes[i].y+200)};
    SDL_RenderFillRect(renderer,&rect1);
    }
    //narise na window
    SDL_RenderPresent(renderer);
}

void initGame(GameState *game){
    int i;
    for(i=0;i<5;i++){
    game->bird.x = 100;
    game->bird.y = 300;
    game->bird.dead = 0;
    }
    game->scrollx = 3;
    game->detectpipe = 0;
    for(i=0;i<3;i++){
    game->pipes[i].x = i* 307 +840;
    game->pipes[i].y = rand()%360+60;
    }
}

int scrolling(GameState *game){
    int i;
    game->bird.y+=GRAVITY;
    for(i=0;i<3;i++){
    game->pipes[i].x -= game->scrollx;
    if(game->pipes[i].x<-80){
        game->pipes[i].x = 840;
        game->pipes[i].y = rand()%360+60;
        if(game->detectpipe<3){
            game->detectpipe++;
        }
        if(game->detectpipe==3){
            game->detectpipe = 0;
        }
    }
        if(game->bird.x>game->pipes[i].x && game->bird.x<game->pipes[i].x+4){
            score++;
        }
    }
return i;
}

int jump(GameState *game,SDL_Renderer *renderer){
    int i;
    for(i=0;i<5;i++){
        game->bird.y-=20;
        doRender(renderer,game);
        scrolling(game);
        detect(game);
    }

}

void detect(GameState *game){
    int i,j,p,m,n,done;
   if(game->bird.x+30 > game->pipes[game->detectpipe].x &&
      game->bird.x < game->pipes[game->detectpipe].x+80 &&
      (game->bird.y < game->pipes[game->detectpipe].y ||
      game->bird.y+30 > game->pipes[game->detectpipe].y+200) ){
        game->bird.dead = 1;
      }
}

int main ( int argc, char *argv[] ){
srand(time(NULL));
int done = 0;
int loopcounter = 0;
GameState game;
initGame(&game);
SDL_Window *window = NULL;
SDL_Renderer *renderer = NULL;
SDL_Init(SDL_INIT_VIDEO);
window = SDL_CreateWindow("flappy bird",SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,840,720,0);
renderer = SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
int lowest;

while(!done){
done = processEvents(window,&game);
doRender(renderer,&game);
scrolling(&game);
detect(&game);
if(game.bird.dead == 1){
    done = 2;
}
if(done == 1){
    done = 0;
    jump(&game,renderer);
}
loopcounter++;
}
if(done !=3){
SDL_Delay(1000);
}
SDL_DestroyWindow(window);
SDL_DestroyRenderer(renderer);
SDL_Quit();
printf("game over!!!\n");
printf("your score is:%d\n",score);
printf("if you want to play again press 'y' key\n");
char key = getch();
system("cls");
if(key =='y'){
score = 0;
main(0,0);
}
  return 0;
}



