#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <SDL2/SDL.h>

#define GRAVITY 10.00f
int loopcount = 0;

typedef struct{
float x,y;
}Man;

typedef struct{
int x,y,xdir;
}Box;

typedef struct{
int x,y,ydir;
}Bullet;

typedef struct{
int x,y;
}Feder;

typedef struct{
int x,y;
}Rocket;

typedef struct{
int x,y;
}Monster;

typedef struct{
Man man;
Box box[20];
Bullet bullet[20];
Feder feder;
Rocket rocket;
Monster monster;
int bullets;
}GameState;


//zaznava gumbe in caka ce bo pritisnen krizec za zepretiokno ali pa esc key
int processEvents(SDL_Window *window, GameState *game){
SDL_Event event;
int done = 0;
while(SDL_PollEvent(&event)){
        switch(event.type){
        case SDL_WINDOWEVENT_CLOSE:
            {
                if(window){
                    SDL_DestroyWindow(window);
                    window = NULL;
                }
            }
            break;
        case SDL_KEYDOWN:
            {
                switch(event.key.keysym.sym)
                    case SDLK_ESCAPE:
                    {
                        done = 1;
                        break;
                    }

            }
            break;
        case SDL_QUIT:
            {
                done = 1;
                break;
            }
        }

}
    const uint8_t *state = SDL_GetKeyboardState(NULL);
    if(state[SDL_SCANCODE_LEFT]){
        game->man.x -=13;
    }
    if(state[SDL_SCANCODE_RIGHT]){
        game->man.x +=13;
    }
    if(state[SDL_SCANCODE_UP]){
         if(loopcount%4==0){
            game->bullet[game->bullets].x = game->man.x+25;
            game->bullet[game->bullets].y = game->man.y;
            game->bullet[game->bullets].ydir = -15;
            game->bullets++;
            loopcount++;
            if(game->bullets>19){
                game->bullets = 0;
            }
         }
    }
    int i;
    //premikanje strelov in detekšen ce grejo cez vrh ekrana
    for(i=0;i<20;i++){
    game->bullet[i].y += game->bullet[i].ydir;
    if(game->bullet[i].y < 0){
     game->bullet[i].y = 750;
     game->bullet[i].ydir = 0;
    }
    }
    game->man.y+=GRAVITY;
    if(game->man.x+50 > game->monster.x && game->man.x < game->monster.x+50
        && game->man.y < game->monster.y+80 && game->man.y+80 > game->monster.y){
            done=2;
        }

    return done;
}
//rise igro
void doRender(SDL_Renderer *renderer, GameState *game){
//draw beckround
SDL_SetRenderDrawColor(renderer,255,255,255,255);
SDL_RenderClear(renderer);
//draw box
int i;
for(i=0;i<20;i++){
if(game->box[i].xdir==0){
    SDL_SetRenderDrawColor(renderer,0,255,0,255);
}else{
    SDL_SetRenderDrawColor(renderer,30,144,255,255);
}
    SDL_Rect rect5 = {game->box[i].x,game->box[i].y,80,20};
    SDL_RenderFillRect(renderer,&rect5);
}
//draw feder
SDL_SetRenderDrawColor(renderer,0,0,0,255);
SDL_Rect rect7 = {game->feder.x,game->feder.y,25,25};
SDL_RenderFillRect(renderer,&rect7);

//draw rocket
SDL_SetRenderDrawColor(renderer,20,150,20,255);
SDL_Rect rect8 = {game->rocket.x,game->rocket.y,25,25};
SDL_RenderFillRect(renderer,&rect8);

//draw player
SDL_SetRenderDrawColor(renderer,0,0,0,255);
SDL_Rect rect = {game->man.x,game->man.y,50,80};
SDL_RenderFillRect(renderer,&rect);
SDL_SetRenderDrawColor(renderer,255,0,0,255);
SDL_Rect rect2 = {game->man.x+10,game->man.y+10,10,10};
SDL_RenderFillRect(renderer,&rect2);
SDL_Rect rect3 = {game->man.x+30,game->man.y+10,10,10};
SDL_RenderFillRect(renderer,&rect3);
SDL_Rect rect4 = {game->man.x+10,game->man.y+30,30,10};
SDL_RenderFillRect(renderer,&rect4);
//bullets
SDL_SetRenderDrawColor(renderer,0,0,255,255);
for(i=0;i<20;i++){
SDL_Rect rect6 = {game->bullet[i].x,game->bullet[i].y,8,8};
SDL_RenderFillRect(renderer,&rect6);
}
//draw monster
SDL_SetRenderDrawColor(renderer,255,0,0,255);
SDL_Rect rect9 = {game->monster.x,game->monster.y,50,80};
SDL_RenderFillRect(renderer,&rect9);

SDL_RenderPresent(renderer);
}
//gameover backround
void gameOver(int done, SDL_Renderer *renderer){

SDL_SetRenderDrawColor(renderer,0,0,0,255);
SDL_RenderClear(renderer);
//G
SDL_SetRenderDrawColor(renderer,255,0,0,255);
SDL_Rect rect = {5,10,20,300};
SDL_RenderFillRect(renderer,&rect);
SDL_Rect rect2 = {25,10,150,20};
SDL_RenderFillRect(renderer,&rect2);
SDL_Rect rect3 = {25,290,150,20};
SDL_RenderFillRect(renderer,&rect3);
SDL_Rect rect4 = {155,180,20,110};
SDL_RenderFillRect(renderer,&rect4);
SDL_Rect rect5 = {55,160,120,20};
SDL_RenderFillRect(renderer,&rect5);
//a
SDL_Rect rect6 = {185,10,20,300};
SDL_RenderFillRect(renderer,&rect6);
SDL_Rect rect7 = {205,10,150,20};
SDL_RenderFillRect(renderer,&rect7);
SDL_Rect rect8 = {335,10,20,300};
SDL_RenderFillRect(renderer,&rect8);
SDL_Rect rect9 = {205,160,150,20};
SDL_RenderFillRect(renderer,&rect9);
//m
SDL_Rect rec = {365,10,20,300};
SDL_RenderFillRect(renderer,&rec);
SDL_Rect rec2 = {365,10,150,20};
SDL_RenderFillRect(renderer,&rec2);
SDL_Rect rec3 = {515,10,20,300};
SDL_RenderFillRect(renderer,&rec3);
SDL_Rect rec4 = {440,10,20,150};
SDL_RenderFillRect(renderer,&rec4);
//e
SDL_Rect rec6 = {545,10,20,300};
SDL_RenderFillRect(renderer,&rec6);
SDL_Rect rec7 = {545,10,145,20};
SDL_RenderFillRect(renderer,&rec7);
SDL_Rect rec8 = {545,160,145,20};
SDL_RenderFillRect(renderer,&rec8);
SDL_Rect rec9 = {545,290,145,20};
SDL_RenderFillRect(renderer,&rec9);
//o
SDL_SetRenderDrawColor(renderer,20,100,40,255);
SDL_Rect re = {10,330,20,100};
SDL_RenderFillRect(renderer,&re);
SDL_Rect re1 = {110,330,20,100};
SDL_RenderFillRect(renderer,&re1);
SDL_Rect re2 = {10,330,100,20};
SDL_RenderFillRect(renderer,&re2);
SDL_Rect re3 = {10,410,100,20};
SDL_RenderFillRect(renderer,&re3);
//v
SDL_SetRenderDrawColor(renderer,20,100,40,255);
SDL_Rect r4 = {150,330,20,40};
SDL_RenderFillRect(renderer,&r4);
SDL_Rect re5 = {170,360,20,40};
SDL_RenderFillRect(renderer,&re5);
SDL_Rect re6 = {190,390,20,40};
SDL_RenderFillRect(renderer,&re6);
SDL_Rect re7 = {230,330,20,40};
SDL_RenderFillRect(renderer,&re7);
SDL_Rect re8 = {210,360,20,40};
SDL_RenderFillRect(renderer,&re8);
//e
SDL_Rect r6 = {280,330,20,100};
SDL_RenderFillRect(renderer,&r6);
SDL_Rect r7 = {280,330,100,20};
SDL_RenderFillRect(renderer,&r7);
SDL_Rect r8 = {280,370,100,20};
SDL_RenderFillRect(renderer,&r8);
SDL_Rect r9 = {280,410,100,20};
SDL_RenderFillRect(renderer,&r9);
//r
SDL_Rect ra = {400,330,20,100};
SDL_RenderFillRect(renderer,&ra);
SDL_Rect rs = {420,370,70,20};
SDL_RenderFillRect(renderer,&rs);
SDL_Rect rd = {470,330,20,60};
SDL_RenderFillRect(renderer,&rd);
SDL_Rect rf = {420,330,70,20};
SDL_RenderFillRect(renderer,&rf);
SDL_Rect rg = {470,400,20,30};
SDL_RenderFillRect(renderer,&rg);
SDL_Rect rh = {465,390,20,20};
SDL_RenderFillRect(renderer,&rh);

SDL_RenderPresent(renderer);
}
//preveri ce je man izven prostora in ga da na drugo stran in ce je bullet zadel monster
void check(GameState *game){
    int i,j,z,l = 0;
    if(game->man.x+25 >700){
    game->man.x = 0;
    }
    if(game->man.x+25 < 0){
    game->man.x = 700-50;
    }

        for(l=0;l<8;l++){
            for(z=0;z<80;z++){
                for(j=0;j<50;j++){
                    for(i=0;i<20;i++){
                        if((game->bullet[i].x)+l==(game->monster.x)+j && game->bullet[i].y==(game->monster.y)+z){
                            game->monster.x = rand()%(700-50);
                            game->monster.y = rand()%5000-20000;
                            game->bullet[i].x = 750;
                            game->bullet[i].y = 750;
                        }
                    }
                }
            }
        }
}
//colisions
int detect(GameState *game){
int i,j,z,numofbox;
int found = 0;
//colision za jump
for(numofbox=0;numofbox<20;numofbox++){
        for(z=0;z<20;z++){
            for(j=0;j<50;j++){
                for(i=0;i<80;i++){
                    if((game->box[numofbox].x)+i == (game->man.x)+j && (game->box[numofbox].y)+z == (game->man.y+80)){
                        found = 1;
                        break;
                    }
                }
                if(found==1){
                    break;
                }
            }

        if(found==1){
            break;
        }
        }
    if(found==1){
        break;
    }
}
//colision for feder
if(found!=1){
    for(z=0;z<25;z++){
        for(j=0;j<50;j++){
            for(i=0;i<25;i++){
                if((game->feder.x)+i == (game->man.x)+j && (game->feder.y)+z == (game->man.y+80)){
                    found = 2;
                    break;
                        }
                    }
                if(found==2){
                break;
                }
            }
        if(found==2){
        break;
        }
    }
}
//colision for rocket
if(found!=1){
    for(z=0;z<25;z++){
        for(j=0;j<50;j++){
            for(i=0;i<25;i++){
                if((game->rocket.x)+i == (game->man.x)+j && (game->rocket.y)+z == (game->man.y+80)){
                    found = 3;
                    break;
                        }
                    }
                if(found==3){
                break;
                }
            }
        if(found==3){
        break;
        }
    }
}

return found;
}
//boxes and feder and rocket movment
void moveboxes(GameState *game){
int i;
    for(i=0;i<20;i++){
    game->box[i].x+=game->box[i].xdir;
    if(game->box[i].x<0){
        game->box[i].xdir *= -1;
    }
    if(game->box[i].x>700-80){
        game->box[i].xdir *= -1;
    }
    }
    game->feder.x+=game->box[0].xdir;
    game->rocket.x+=game->box[10].xdir;

}
//init game variables
void initGame(GameState *game){
int i;
game->man.x = 350-25;
game->man.y = 300;
game->box[19].x = 350-40;
game->box[19].y = 700-20;
game->box[19].xdir = 0;
for(i=0;i<19;i++){
game->box[i].x = rand()%(700-80);
game->box[i].y = (80* i)-850;
game->box[i].xdir = 0;
}
for(i=0;i<20;i++){
game->bullet[i].x = 350;
game->bullet[i].y = 750;
game->bullet[i].ydir = 0;
}
game->bullets = 0;
game->feder.x = game->box[0].x+(rand()%55);
game->feder.y = game->box[0].y-25;
game->rocket.x = 1500;
game->rocket.y = (game->box[10].y-25)-3600;
game->monster.x = rand()%(700-50);
game->monster.y = rand()%5000-5000;
}
int main ( int argc, char *argv[] ){
//da je random res rendom
srand(time(NULL));
//kako visoko si prisel
int height = 0;
//loop index and done for game loop
int j,z,i,done = 0;
//game init
GameState game;
initGame(&game);
//SDL init
SDL_Window *window = NULL;
SDL_Renderer *renderer = NULL;
SDL_Init(SDL_INIT_VIDEO);
window = SDL_CreateWindow("doodle jump",SDL_WINDOWPOS_UNDEFINED,20,700,700,0);
renderer = SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
//game loop
int detected = 0;
while(!done && game.man.y+80<700){
check(&game);
doRender(renderer, &game);

done = processEvents(window, &game);
detected = detect(&game);
//ce je detect zaznav colision z box
if(detected==1){

for(i=0;i<30;i++){
    if(i<23){
    game.man.y-=23;
    }else{

    game.man.y-=30-i;

    }
    check(&game);
    doRender(renderer,&game);
    loopcount++;

    done = processEvents(window, &game);
    if(done==1 || done ==2){
    break;
    }

    moveboxes(&game);

    if(game.man.y<200){
        for(j=0;j<20;j++){
            game.box[j].y+=13;

        }
        game.feder.y+=13;
        game.rocket.y+=13;
        game.monster.y+=8;
        height+=10;
        game.man.y = 200;
    }
        if(game.feder.y > 700){
        game.feder.y= game.box[0].y-25;
        game.feder.x= 1500;
        }
         if(game.rocket.y > 700){
        game.rocket.y= game.box[10].y-25;
        game.rocket.x= game.box[10].x+(rand()%55);
        }
        if(game.monster.y > 700){
        game.monster.x= rand()%(700-50);
        game.monster.y= rand()%2500-2500;
        }
        if(height<5000){
            for(z=0;z<20;z++){
                if(game.box[z].y>700){
                    game.box[z].y= -900;
                    game.box[z].x=rand()%(700-80);
                }
            }
        }else if(height<10000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                if(z%2==1){
                    game.box[z].xdir = rand()%3-1;
                }
            }
        }
    }else if(height<20000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                    if(z==3 || z==7 || z==9 || z==15 || z==19){
                        continue;
                    }
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%5-2;
            }
        }
    }else if(height<30000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                    if(z==0 || z==14 || z==18){
                        game.box[z].xdir = 0;
                        continue;
                    }
                game.box[z].xdir = rand()%7-3;
            }
        }
    }else if(height<40000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%9-4;
            }
        }
    }else if(height<50000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%11-5;
            }
        }
    }else{
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%13-6;
                if(game.box[z].xdir==0){
                    game.box[z].xdir = 6;
                }

                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
            }
        }
    }
    if(i%15==0){
        moveboxes(&game);
    }
}


}
//ce je detect zaznav colision z fedrom
if(detected==2){
   for(i=0;i<56;i++){
    if(i<46){
    game.man.y-=28;
    }else{
    game.man.y-=56-i;
    }
    check(&game);
    doRender(renderer,&game);
    loopcount++;
    done = processEvents(window, &game);
    if(done==1 || done ==2){
        break;
    }
    if(i%2==0){
    moveboxes(&game);
    }
    if(game.man.y<200){
        for(j=0;j<20;j++){
            game.box[j].y+=14;
        }
        game.feder.y+=14;
        game.rocket.y+=14;
        game.monster.y+=4;
        height+=10;
        game.man.y=200;
    }
        if(game.feder.y > 700){
        game.feder.y= game.box[0].y-25;
        game.feder.x= game.box[0].x+(rand()%55);
        }
        if(game.rocket.y > 700){
        game.rocket.y= game.box[10].y-25;
        game.rocket.x= game.box[10].x+(rand()%55);
        }
        if(game.monster.y > 700){
        game.monster.x= rand()%(700-50);
        game.monster.y= rand()%2500-2500;
        }
            if(height<5000){
            for(z=0;z<20;z++){
                if(game.box[z].y>700){
                    game.box[z].y= -900;
                    game.box[z].x=rand()%(700-80);
                }
            }
        }else if(height<10000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                if(z%2==1){
                    game.box[z].xdir = rand()%3-1;
                }
            }
        }
    }else if(height<20000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                    if(z==3 || z==7 || z==9 || z==15 || z==19){
                        continue;
                    }
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%5-2;
            }
        }
    }else if(height<30000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                    if(z==0 || z==14 || z==18){
                        game.box[z].xdir = 0;
                        continue;
                    }
                game.box[z].xdir = rand()%7-3;
            }
        }
    }else if(height<40000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%9-4;
            }
        }
    }else if(height<50000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%11-5;
            }
        }
    }else{
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%13-6;
                if(game.box[z].xdir==0){
                    game.box[z].xdir = 6;
                }
                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
            }
        }
    }




    }
}
//ce je detect zaznav colision z raketo
if(detected==3){
   for(i=0;i<186;i++){
    if(i<176){
    game.man.y-=28;
    }else{
    game.man.y-=186-i;
    }
    check(&game);
    doRender(renderer,&game);
    loopcount++;
    done = processEvents(window, &game);
    if(done==1 || done ==2){
        break;
    }
    if(i%2==0){
    moveboxes(&game);
    }
    if(game.man.y<200){
        for(j=0;j<20;j++){
            game.box[j].y+=14;
        }
        game.feder.y+=14;
        game.rocket.y+=14;
        game.monster.y+=4;
        height+=10;
        game.man.y=200;
    }
        if(game.feder.y > 700){
        game.feder.y= game.box[0].y-25;
        game.feder.x= game.box[0].x+(rand()%55);
        }
        if(game.rocket.y > 700){
        game.rocket.y= -16200;
        game.rocket.x= 1500;
        }
        if(game.monster.y > 700){
        game.monster.x= rand()%(700-50);
        game.monster.y= rand()%2500-2500;
        }
            if(height<5000){
            for(z=0;z<20;z++){
                if(game.box[z].y>700){
                    game.box[z].y= -900;
                    game.box[z].x=rand()%(700-80);
                }
            }
        }else if(height<10000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                if(z%2==1){
                    game.box[z].xdir = rand()%3-1;
                }
            }
        }
    }else if(height<20000){
        for(z=0;z<20;z++){
            if(game.box[z].y>700){
                    if(z==3 || z==7 || z==9 || z==15 || z==19){
                        continue;
                    }
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%5-2;
            }
        }
    }else if(height<30000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                    if(z==0 || z==14 || z==18){
                        game.box[z].xdir = 0;
                        continue;
                    }
                game.box[z].xdir = rand()%7-3;
            }
        }
    }else if(height<40000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%9-4;
            }
        }
    }else if(height<50000){
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%11-5;
            }
        }
    }else{
        for(z=0;z<20;z+=2){
            if(game.box[z].y>700){
                game.box[z].y= -900;
                game.box[z].x=rand()%(700-80);
                game.box[z].xdir = rand()%13-6;
                if(game.box[z].xdir==0){
                    game.box[z].xdir = 6;
                }
                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==1){
                    game.box[z].xdir = 5;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
                if(game.box[z].xdir==2){
                    game.box[z].xdir = 4;
                }
            }
        }
    }




    }
}
moveboxes(&game);

loopcount++;
}
//ce je konec igre
if(!done){
    gameOver(done,renderer);
    SDL_Delay(1500);
    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(renderer);
    SDL_Quit();
    printf("your score:%d\n",height);
    printf("do you want to play agein y/n");
    if(getch()=='y'){
        system("cls");
        main(1,1);
    }
}
//ce si pritisnil esc ali pa krizec za zapreti program
else if(done==2){
    gameOver(done,renderer);
    SDL_Delay(1500);
    SDL_DestroyWindow(window);
    SDL_DestroyRenderer(renderer);
    SDL_Quit();
    printf("your score:%d\n",height);
    printf("do you want to play agein y/n");
    if(getch()=='y'){
        system("cls");
        main(1,1);
    }
}else{
SDL_DestroyWindow(window);
SDL_DestroyRenderer(renderer);
SDL_Quit();
}
  return 0;
}


